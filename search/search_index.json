{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"ShaderFlow Modular shader engine designed for simplicity and speed      Links \u2022     Installation \u2022     Documentation \u2022     Issues \u2022     Funding <sub> YouTube \u2022     GitHub \u2022     Contact \u2022     Changelog \u2022     License </sub>"},{"location":"#description","title":"\ud83d\udd25 Description","text":"<p>ShaderFlow is a complete Tool for Artists, Musicians and Shader Enthusiasts</p> <p>A Framework for Creating, Exporting Real Time and Audio Reactive Shaders</p> <ul> <li>\ud83d\udee1\ufe0f Open source: trust and transparency, cross platform, configurable</li> <li>\ud83e\uddf8 80% ShaderToy compatible, easily transfer your knowledge</li> <li>\ud83d\udcd4 Video codecs: easily export to H264, HEVC, AV1, (+NVENC)</li> <li>\ud83d\ude80 Physics-like animations with control systems dynamics</li> <li>\ud83d\udd31 High quality: any resolution, framerate, bitrate, SSAA</li> <li>\ud83c\udfb5 Audio reactive: live music, professional video</li> <li>\ud83c\udf0a Audio waveforms and oscilloscope support</li> <li>\ud83c\udfa5 Video as texture: real time 4k processing</li> <li>\u267b\ufe0f Live reload shaders, instant feedback</li> <li>\ud83c\udfa8 No watermarks, user first experience</li> <li>\u23f3 Perfect frametimes, no jitter, no lag</li> <li>\ud83c\udf35 Fastest rendering times in the west</li> <li>\ud83d\udc41 Built-in camera 2D, 3D, 360\u00b0, VR</li> </ul> <p></p>"},{"location":"#showcase","title":"\ud83d\udcf8 Showcase","text":"<p>\ud83c\udfa7 \u2022 Remember to Enable Audio on the Videos !</p> <p></p> <p><sup>Video: Music Bars Tech Demo Scene. Sources: Music. Property of their original owners \u2696\ufe0f</sup></p> <p></p> <p><sup>\u2696\ufe0f The Entertainer by Scott Joplin (Public Domain), Salamander Grand Piano by Alexander Holm (CC-BY 3.0)</sup></p> <p></p> <p><sup>Video: Educational Scene about Parallel Plates Capacitor. Source: Coded myself long ago.</sup></p>"},{"location":"#installation","title":"\ud83d\udce6 Installation","text":"<p>Head out to the official website for the latest installation instructions and more!</p> <p> </p>"},{"location":"examples/","title":"ShaderFlow/Examples","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p> <p>After activating the Virtual Environment on <code>.venv</code>:</p> <ul> <li>Run <code>shaderflow</code> to see all available scenes</li> <li>Run <code>shaderflow (scene)</code> to see commands of a scene</li> <li>Run <code>shaderflow (scene) main</code> to run a specific scene</li> <li>Run <code>shaderflow (scene) main --help</code> for scene options</li> </ul> <p>Go for the Python file listed in the output for examples!</p>"},{"location":"about/changelog/","title":"Changelog","text":""},{"location":"about/changelog/#0.9.2","title":"\u270f\ufe0f v0.9.2 August ??, 2025","text":"<ul> <li>Recalled all executable releases, enough users didn't see warnings</li> <li>Fixed FFmpeg command line interface options missing</li> <li>Minor tweaks to <code>Scene.main</code> typer arguments</li> <li>Fix <code>turbopipe.sync</code> shouldn't be called when disabled</li> </ul>"},{"location":"about/changelog/#0.9.0","title":"\ud83d\udce6 v0.9.0 June 2, 2025","text":"<ul> <li>Add an heuristic to use the headless context when exporting videos</li> <li>Fix progress bar creation before ffmpeg command log causing a bad line</li> <li>Fix frametimer first frame being <code>dt=0</code> instead of <code>1/fps</code></li> <li>Rename <code>ShaderObject</code> to <code>ShaderProgram</code> to better reflect ModernGL</li> <li>Initial ground work on better metaprogramming and include system</li> <li>Partial overhaul and simplify the <code>ShaderTexture</code> class</li> <li><code>ShaderTexture.track</code> is now a float ratio of the scene's resolution</li> <li>Drastically improve import times and consequently CLI startup times</li> <li>Speed improvements with float64 on dynamic number and optional aux vars</li> <li>(#61)  Fix many (skill issue) memory leaks:<ul> <li>Use <code>weakref.proxy()</code> on every module's <code>.scene</code> to allow for deeper <code>gc.collect()</code> to find circular references and clean up resources properly</li> <li>Release proxy render buffers that are piped to ffmpeg when done</li> <li>Release texture objects when ShaderTexture is garbage collected</li> <li>Do not recreate imgui context on every scene init</li> </ul> </li> <li>Base duration of the scenes are now configurable (10 seconds default)</li> <li>Throw an exception when FFmpeg process stops unexpectedly</li> <li>Fix sharing a global watchdog causing errors on many initializations</li> <li>Cleanup scheduler before module setup, fixes scene reutilization bug</li> <li>Add a new 'subsample' parameter for better downsampling of SSAA&gt;2</li> <li>Use macros for initializing structs with fixed specification from uniforms</li> <li>Bundle the <code>Examples</code> directory into <code>Resources</code> for wheel releases</li> <li>Support for rendering videos \"in-memory\" without a named file on disk</li> <li>Refactor <code>ExportingHelper</code> out of <code>ShaderScene.main</code></li> <li>Properly catch FFmpeg's <code>stderr</code> and <code>stdout</code> (allows in-memory render)</li> <li>Convert the project into snake case, still have my differences</li> </ul>"},{"location":"about/changelog/#0.8.0","title":"\ud83d\udce6 v0.8.0 October 27, 2024","text":"<ul> <li>(#6) Move away from pyimgui to imgui-bundle</li> <li>Fix <code>Scene.tau</code> overlooked calculation, it was half right!</li> <li>Add optional frameskipping disabling on <code>Scene.main</code></li> <li>Add optional progress callback on <code>Scene.main</code></li> <li>The <code>Camera.zoom</code> is now the distance from the center to the top</li> <li>Add <code>Camera.fov</code> bound to <code>Camera.zoom</code>, a simple tan atan relation</li> <li>Use <code>numpy.dtype</code> instead of spaghetti methods on <code>Texture</code></li> <li>Add many <code>Scene.log_*</code> methods for DRY 'who module's logging</li> <li>Do not fit rendering resolutions every frame (slow)</li> <li>Add a <code>Uniform</code> class for convenience than the whole <code>Variable</code></li> <li>Fix bug ensure the parent directory exists when exporting</li> <li>Revert <code>vflip</code>'s duty to FFmpeg than on the final sampling shader</li> <li>Renamed <code>Scene.main(benchmark=)</code> to <code>freewheel</code> (exporting mode)</li> <li>Internal code simplification and bug fixes</li> </ul>"},{"location":"about/contact/","title":"About/Contact","text":"<ul> <li> <p> Discord <p>Largest community, fastest responses</p> <ul><li>Priority sponsors support</li></ul> Join Server</p> </li> <li> <p> GitHub <p>Officialize your Requests or Issues</p> <ul><li>One repository per project</li></ul> All Projects</p> </li> <li> <p> Telegram <p>Also an option if you prefer over others!</p> <ul><li>Larger uploads can be useful</li></ul> Join Group</p> </li> <li> <p> Email <p>Get in touch directly and privately</p> <ul><li>Business or Traditional</li></ul> Send a Message</p> </li> </ul> <p>I live on the UTC-04:00 Timezone (EDT), so I might be sleeping when you send me a message</p> <p>Feel free to talk in any of the Languages: \ud83c\udde7\ud83c\uddf7 \ud83c\uddfa\ud83c\uddf8</p>"},{"location":"about/roadmap/","title":"Roadmap","text":"<p>     Click here to see the Roadmap on GitHub Projects </p>"},{"location":"docs/module/","title":"ShaderFlow/ShaderModule","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p>"},{"location":"docs/scene/","title":"ShaderFlow/ShaderScene","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p>"},{"location":"docs/scene/#resolution","title":"Resolution","text":""},{"location":"docs/scene/#aspect-ratio","title":"Aspect ratio","text":"<p>The aspect ratio of a resolution is the ratio between its width and height. Two interpretations are: \"How many times wider is the resolution than it is tall?\", and a numeric one: \"If the top value is 1 relative to the center, what is the \\(x\\) value on each side?\"</p> <p>The value of <code>self.aspect_ratio</code> will always be <code>self.width/self.height</code> at any given time, and an internal attribute <code>self._aspect_ratio</code> controls how resizes are calculated.</p>"},{"location":"docs/scene/#resizes","title":"Resizes","text":"<p>The resolution a Scene will render in realtime or export to a video file is calculated inside the <code>main</code> method. The final value weakly depends on the state prior calling it, and strongly on a few incoming arguments, namely <code>width</code>, <code>height</code>, <code>ratio</code> and <code>scale</code>.</p> <p>The internal starting value of a Scene's resolution is 1920x1080 (Full HD), with no enforced aspect ratio (dynamic), and a scale of 1. This is the default output resolution if no such related arguments are passed, and no <code>self.*</code> attributes were changed anywhere.</p> <ol> <li>The value of <code>self._aspect_ratio</code> is None</li> </ol> <p>This is the simplest case. Any value passed on either <code>width</code> or <code>height</code> will override the respective <code>self.*</code> attribute, not affecting the other. The final resolution is post-multiplied by <code>self.scale</code>. For example, rendering with <code>width=1280, height=None</code> will give a <code>1280x1080</code> video, and rendering with <code>scale=2</code> gives <code>3840x2160</code>.</p> <ol> <li>The value of <code>self._aspect_ratio</code> is a float</li> </ol> <p>This will enforce the aspect ratio of the resolution.</p> <p>If only one of <code>width</code> or <code>height</code> are passed, ShaderFlow will calculate the other based on the aspect ratio, and force the one sent. For example, <code>ratio=1</code> and <code>width=1280</code> will give a <code>1280x1280</code> video, and <code>ratio=16/9</code> and <code>height=1440</code> will give a <code>2560x1440</code> video.</p> <p>If both <code>width</code> and <code>height</code> are passed, ShaderFlow will take preference to <code>width</code> over <code>height</code> in the calculations. For example, <code>ratio=16/9</code> and <code>width=1280, height=1280</code> will give a <code>1280x720</code> video.</p> <p>The value is post-multiplied by <code>self.scale</code> as always.</p>"},{"location":"docs/scripts/","title":"Scripts","text":"<p>     Click here to see example scripts on GitHub </p>"},{"location":"docs/shader/","title":"ShaderFlow/ShaderObject","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p>"},{"location":"docs/texture/","title":"ShaderFlow/ShaderTexture","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p>"},{"location":"get/","title":"Installation","text":""},{"location":"get/#from-wheels","title":"\ud83e\uddc0 From Wheels","text":"<p> <p>The most reliable way to use the projects \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Run directly with astral-sh/uv tools or use as a package</li> <li>Run the package commands or as a python import</li> </ul> <p><sup>Recommended for: Basic users, advanced users, developers</sup></p> <p></p>"},{"location":"get/#from-source","title":"\ud83d\udd25 From Source","text":"<p> <p>The most flexible way to use the projects \u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Automatic install scripts, spend more time using the projects</li> <li>Latest features, bugs, fixes, highly configurable</li> </ul> <p><sup>Recommended for: Advanced users, contributors, developers</sup></p> <p></p>"},{"location":"get/installers/","title":"Installers","text":"Windows Linux MacOS <p> Note: Executables are safe and auditable, but might trigger false antivirus alerts     I will not destroy my reputation by distributing malware, code signing is infeasible. </p> x86-64 <p></p> <p> Note: Open a terminal in the download path, extract it with <code>cat *.tar.gz | tar -xzvf - -i</code> <sup>And then run <code>./project-name-*.bin</code> shown in the previous output for executing it!</sup> </p> x86-64ARM64 <p></p> <p></p> <p> Note: Open a terminal in the download path, extract it with <code>cat *.tar.gz | tar -xzvf - -i</code> <sup>And then run <code>./project-name-*.bin</code> shown in the previous output for executing it!</sup> </p> Apple SiliconIntel Macs <p></p> <p></p> <p><sup> \u2764\ufe0f Note: You can contact me for a free copy of a paid executable with a valid or altruistic reason!</sup></p>"},{"location":"get/installers/#uninstalling","title":"\u267b\ufe0f Uninstalling","text":"<p>Workspaces: Where data, models, versions, cache of the projects are stored</p> <p>All project's Workspaces are located in your platform's <code>User Data</code> directory:   Windows C:\\Users\\(...)\\AppData\\Local\\BrokenSource  MacOS ~/Library/Application Support/BrokenSource  Linux ~/.local/share/BrokenSource </p> <p>Note: This should be the only directory used by Installers</p>"},{"location":"get/source/","title":"Source","text":"Windows Linux MacOS Manual <p> Open a folder to download the code on Windows Explorer Press Ctrl+L , run <code>powershell</code> and execute: <pre><code>irm https://brokensrc.dev/get.ps1 | iex\n</code></pre> How it works: <code>irm</code> downloads the script, <code>iex</code> executes it directly  Don't want to use it? Follow the  Manual tab above!</p> <p> Open a Terminal on some directory and run: <pre><code>/bin/bash -c \"$(curl -sS https://brokensrc.dev/get.sh)\"\n</code></pre> How it works: <code>curl</code> downloads the script, <code>bash</code> executes it directly  Don't want to use it? Follow the  Manual tab above!</p> <p> Open a Terminal on some directory and run: <pre><code>/bin/bash -c \"$(curl -sS https://brokensrc.dev/get.sh)\"\n</code></pre> How it works: <code>curl</code> downloads the script, <code>bash</code> executes it directly  Don't want to use it? Follow the  Manual tab above!</p> <p></p> <ul> <li>Install git and uv on your Platform</li> </ul> <p>Download the code<pre><code>git clone https://github.com/BrokenSource/BrokenSource --recurse-submodules\n</code></pre> Enter the directory<pre><code>cd BrokenSource\n</code></pre> Ensure submodules are on main<pre><code>git submodule foreach --recursive 'git checkout main || true'\n</code></pre> Create venv and install dependencies<pre><code>uv sync --all-packages\n</code></pre></p> Directly with uvTraditional method <p></p> Start using any Project<pre><code>uv run shaderflow\nuv run depthflow\nuv run broken\n</code></pre> <p></p> <p>Activate the venv<pre><code># Windows:\n.venv\\Scripts\\Activate.ps1 # PowerShell\n.venv\\Scripts\\Activate.bat # CMD\n\n# Linux and MacOS:\nsource .venv/bin/activate # Bash\nsource .venv/bin/activate.fish # Fish\n</code></pre> Start using any Project<pre><code>broken\nshaderflow\ndepthflow\n</code></pre></p>"},{"location":"get/source/#uninstalling","title":"\u267b\ufe0f Uninstalling","text":"<p>Apart from deleting the <code>BrokenSource</code> folder where you cloned the code,</p> <p>Workspaces: Where data, models, versions, cache of the projects are stored</p> <p>All project's Workspaces are located in your platform's <code>User Data</code> directory:   Windows C:\\Users\\(...)\\AppData\\Local\\BrokenSource  MacOS ~/Library/Application Support/BrokenSource  Linux ~/.local/share/BrokenSource </p> <p>Models: PyTorch, HuggingFace, TorchHub downloads models on:</p> <p>  Windows C:\\Users\\(...)\\.cache\\{huggingface,transformers,torch}  MacOS ~/Library/Caches/{huggingface,transformers,torch}  Linux ~/.cache/{huggingface,transformers,torch} </p> <p>Package manager cache: </p>  uv Pip Poetry PDM <p>Either run <code>uv cache prune</code> or <code>uv cache dir</code> to locate wheel downloads caches, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\uv  MacOS ~/Library/Caches/uv  Linux ~/.cache/uv </p> <p>Either run <code>pip cache purge</code> or <code>pip cache dir</code> to locate wheel download caches, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\pip  MacOS ~/Library/Caches/pip  Linux ~/.cache/pip </p> <p>Either run <code>poetry cache clear</code> or <code>poetry cache list</code> to locate caches and venvs, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\pypoetry  MacOS ~/Library/Caches/pypoetry  Linux ~/.cache/pypoetry </p> <p>Either run <code>pdm cache clear</code> or <code>pdm cache list</code> to locate wheel downloads caches, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\pdm  MacOS ~/Library/Caches/pdm  Linux ~/.cache/pdm </p>"},{"location":"get/wheels/","title":"Wheels","text":"Directly Package <p>  1. Open a Terminal and install astral-sh/uv - a fast python and project manager:</p>  Windows Linux MacOS <p>Using WinGet, Microsoft's official package manager: <pre><code>winget install --id=astral-sh.uv -e\n</code></pre></p> <p>Install from your distro package manager, or universally: <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre></p> <p>Using Homebrew, a popular package manager for MacOS: <pre><code>brew install uv\n</code></pre></p> <p> 2. Run any project simply with: <pre><code>uvx (project) (args)\n</code></pre>  For example <code>uvx depthflow gradio</code></p> <p>  Add any project to your <code>pyproject.toml</code> or install inside a venv, write and run any scripts.</p> <ul> <li>Check the examples tabs at the top or the repository for usage!</li> </ul> <p>Preferably pin the package version <code>==x.y.z</code> anywhere for stability!</p>"},{"location":"get/wheels/#uninstalling","title":"\u267b\ufe0f Uninstalling","text":"<p>Apart from uninstalling the package and/or deleting the virtual environment:</p> <p>Workspaces: Where data, models, versions, cache of the projects are stored</p> <p>All project's Workspaces are located in your platform's <code>User Data</code> directory:   Windows C:\\Users\\(...)\\AppData\\Local\\BrokenSource  MacOS ~/Library/Application Support/BrokenSource  Linux ~/.local/share/BrokenSource </p> <p>Models: PyTorch, HuggingFace, TorchHub downloads models on:</p> <p>  Windows C:\\Users\\(...)\\.cache\\{huggingface,transformers,torch}  MacOS ~/Library/Caches/{huggingface,transformers,torch}  Linux ~/.cache/{huggingface,transformers,torch} </p> <p>Package manager cache: </p>  uv Pip Poetry PDM <p>Either run <code>uv cache prune</code> or <code>uv cache dir</code> to locate wheel downloads caches, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\uv  MacOS ~/Library/Caches/uv  Linux ~/.cache/uv </p> <p>Either run <code>pip cache purge</code> or <code>pip cache dir</code> to locate wheel download caches, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\pip  MacOS ~/Library/Caches/pip  Linux ~/.cache/pip </p> <p>Either run <code>poetry cache clear</code> or <code>poetry cache list</code> to locate caches and venvs, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\pypoetry  MacOS ~/Library/Caches/pypoetry  Linux ~/.cache/pypoetry </p> <p>Either run <code>pdm cache clear</code> or <code>pdm cache list</code> to locate wheel downloads caches, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\pdm  MacOS ~/Library/Caches/pdm  Linux ~/.cache/pdm </p>"},{"location":"modules/camera/","title":"ShaderFlow/ShaderCamera","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p>"},{"location":"modules/camera/#camera-modes","title":"Camera Modes","text":"<ul> <li>1 Free Camera 3D</li> <li>2 Generic Camera 2D</li> <li>3 Spherical Camera 3D</li> <li>p Camera Projection</li> <li>i j k UP Axis (x, y, z)</li> </ul>"},{"location":"modules/camera/#camera-controls","title":"Camera Controls","text":"<ul> <li>W A S D Move</li> <li>Q E Roll</li> <li>Space Shift Move Up/Down</li> <li>Mouse Look Around</li> <li>Mouse Wheel Zoom In/Out</li> <li>T G Isometric +/-</li> </ul>"},{"location":"modules/camera/#scene-controls","title":"Scene Controls","text":"<ul> <li>R Reload Shaders</li> <li>O Reset Scene</li> </ul>"},{"location":"modules/camera/#window-controls","title":"Window Controls","text":"<ul> <li>Tab ShaderFlow Menu</li> <li>F1 Exclusive Mouse Mode</li> <li>F2 Screenshot</li> <li>F11 Fullscreen</li> <li>Esc Exit</li> </ul>"}]}